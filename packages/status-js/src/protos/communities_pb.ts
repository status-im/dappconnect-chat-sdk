// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file communities.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf'
import { CommunityTokenType } from './enums_pb.js'
import { ChatIdentity } from './chat-identity_pb.js'
import { Shard } from './shard_pb.js'

/**
 * @generated from message Grant
 */
export class Grant extends Message<Grant> {
  /**
   * @generated from field: bytes community_id = 1;
   */
  communityId = new Uint8Array(0)

  /**
   * @generated from field: bytes member_id = 2;
   */
  memberId = new Uint8Array(0)

  /**
   * @generated from field: string chat_id = 3;
   */
  chatId = ''

  /**
   * @generated from field: uint64 clock = 4;
   */
  clock = protoInt64.zero

  constructor(data?: PartialMessage<Grant>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'Grant'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    { no: 2, name: 'member_id', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: 'chat_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Grant {
    return new Grant().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Grant {
    return new Grant().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Grant {
    return new Grant().fromJsonString(jsonString, options)
  }

  static equals(
    a: Grant | PlainMessage<Grant> | undefined,
    b: Grant | PlainMessage<Grant> | undefined
  ): boolean {
    return proto3.util.equals(Grant, a, b)
  }
}

/**
 * @generated from message CommunityMember
 */
export class CommunityMember extends Message<CommunityMember> {
  /**
   * @generated from field: repeated CommunityMember.Roles roles = 1;
   */
  roles: CommunityMember_Roles[] = []

  /**
   * @generated from field: repeated RevealedAccount revealed_accounts = 2 [deprecated = true];
   * @deprecated
   */
  revealedAccounts: RevealedAccount[] = []

  /**
   * @generated from field: uint64 last_update_clock = 3;
   */
  lastUpdateClock = protoInt64.zero

  /**
   * @generated from field: CommunityMember.ChannelRole channel_role = 4;
   */
  channelRole = CommunityMember_ChannelRole.POSTER

  constructor(data?: PartialMessage<CommunityMember>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityMember'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'roles',
      kind: 'enum',
      T: proto3.getEnumType(CommunityMember_Roles),
      repeated: true,
    },
    {
      no: 2,
      name: 'revealed_accounts',
      kind: 'message',
      T: RevealedAccount,
      repeated: true,
    },
    {
      no: 3,
      name: 'last_update_clock',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
    {
      no: 4,
      name: 'channel_role',
      kind: 'enum',
      T: proto3.getEnumType(CommunityMember_ChannelRole),
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityMember {
    return new CommunityMember().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityMember {
    return new CommunityMember().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityMember {
    return new CommunityMember().fromJsonString(jsonString, options)
  }

  static equals(
    a: CommunityMember | PlainMessage<CommunityMember> | undefined,
    b: CommunityMember | PlainMessage<CommunityMember> | undefined
  ): boolean {
    return proto3.util.equals(CommunityMember, a, b)
  }
}

/**
 * @generated from enum CommunityMember.Roles
 */
export enum CommunityMember_Roles {
  /**
   * @generated from enum value: ROLE_NONE = 0;
   */
  ROLE_NONE = 0,

  /**
   * @generated from enum value: ROLE_OWNER = 1;
   */
  ROLE_OWNER = 1,

  /**
   * @generated from enum value: ROLE_ADMIN = 4;
   */
  ROLE_ADMIN = 4,

  /**
   * @generated from enum value: ROLE_TOKEN_MASTER = 5;
   */
  ROLE_TOKEN_MASTER = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(CommunityMember_Roles)
proto3.util.setEnumType(CommunityMember_Roles, 'CommunityMember.Roles', [
  { no: 0, name: 'ROLE_NONE' },
  { no: 1, name: 'ROLE_OWNER' },
  { no: 4, name: 'ROLE_ADMIN' },
  { no: 5, name: 'ROLE_TOKEN_MASTER' },
])

/**
 * @generated from enum CommunityMember.ChannelRole
 */
export enum CommunityMember_ChannelRole {
  /**
   * We make POSTER the first role to be the default one.
   * This is for backwards compatibility. Older protobufs won't have this field and will default to 0.
   *
   * @generated from enum value: CHANNEL_ROLE_POSTER = 0;
   */
  POSTER = 0,

  /**
   * @generated from enum value: CHANNEL_ROLE_VIEWER = 1;
   */
  VIEWER = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(CommunityMember_ChannelRole)
proto3.util.setEnumType(
  CommunityMember_ChannelRole,
  'CommunityMember.ChannelRole',
  [
    { no: 0, name: 'CHANNEL_ROLE_POSTER' },
    { no: 1, name: 'CHANNEL_ROLE_VIEWER' },
  ]
)

/**
 * @generated from message CommunityTokenMetadata
 */
export class CommunityTokenMetadata extends Message<CommunityTokenMetadata> {
  /**
   * @generated from field: map<uint64, string> contract_addresses = 1;
   */
  contractAddresses: { [key: string]: string } = {}

  /**
   * @generated from field: string description = 2;
   */
  description = ''

  /**
   * @generated from field: string image = 3;
   */
  image = ''

  /**
   * @generated from field: CommunityTokenType tokenType = 4;
   */
  tokenType = CommunityTokenType.UNKNOWN_TOKEN_TYPE

  /**
   * @generated from field: string symbol = 5;
   */
  symbol = ''

  /**
   * @generated from field: string name = 6;
   */
  name = ''

  /**
   * @generated from field: uint32 decimals = 7;
   */
  decimals = 0

  constructor(data?: PartialMessage<CommunityTokenMetadata>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityTokenMetadata'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'contract_addresses',
      kind: 'map',
      K: 4 /* ScalarType.UINT64 */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
    {
      no: 2,
      name: 'description',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: 'image', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'tokenType',
      kind: 'enum',
      T: proto3.getEnumType(CommunityTokenType),
    },
    { no: 5, name: 'symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 7, name: 'decimals', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityTokenMetadata {
    return new CommunityTokenMetadata().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityTokenMetadata {
    return new CommunityTokenMetadata().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityTokenMetadata {
    return new CommunityTokenMetadata().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CommunityTokenMetadata
      | PlainMessage<CommunityTokenMetadata>
      | undefined,
    b: CommunityTokenMetadata | PlainMessage<CommunityTokenMetadata> | undefined
  ): boolean {
    return proto3.util.equals(CommunityTokenMetadata, a, b)
  }
}

/**
 * @generated from message CommunityPermissions
 */
export class CommunityPermissions extends Message<CommunityPermissions> {
  /**
   * @generated from field: bool ens_only = 1;
   */
  ensOnly = false

  /**
   * https://gitlab.matrix.org/matrix-org/olm/blob/master/docs/megolm.md is a candidate for the algorithm to be used in case we want to have private communityal chats, lighter than pairwise encryption using the DR, less secure, but more efficient for large number of participants
   *
   * @generated from field: bool private = 2;
   */
  private = false

  /**
   * @generated from field: CommunityPermissions.Access access = 3;
   */
  access = CommunityPermissions_Access.UNKNOWN_ACCESS

  constructor(data?: PartialMessage<CommunityPermissions>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityPermissions'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'ens_only', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: 'private', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 3,
      name: 'access',
      kind: 'enum',
      T: proto3.getEnumType(CommunityPermissions_Access),
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityPermissions {
    return new CommunityPermissions().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityPermissions {
    return new CommunityPermissions().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityPermissions {
    return new CommunityPermissions().fromJsonString(jsonString, options)
  }

  static equals(
    a: CommunityPermissions | PlainMessage<CommunityPermissions> | undefined,
    b: CommunityPermissions | PlainMessage<CommunityPermissions> | undefined
  ): boolean {
    return proto3.util.equals(CommunityPermissions, a, b)
  }
}

/**
 * @generated from enum CommunityPermissions.Access
 */
export enum CommunityPermissions_Access {
  /**
   * @generated from enum value: UNKNOWN_ACCESS = 0;
   */
  UNKNOWN_ACCESS = 0,

  /**
   * @generated from enum value: AUTO_ACCEPT = 1;
   */
  AUTO_ACCEPT = 1,

  /**
   * @generated from enum value: INVITATION_ONLY = 2 [deprecated = true];
   * @deprecated
   */
  INVITATION_ONLY = 2,

  /**
   * @generated from enum value: MANUAL_ACCEPT = 3;
   */
  MANUAL_ACCEPT = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(CommunityPermissions_Access)
proto3.util.setEnumType(
  CommunityPermissions_Access,
  'CommunityPermissions.Access',
  [
    { no: 0, name: 'UNKNOWN_ACCESS' },
    { no: 1, name: 'AUTO_ACCEPT' },
    { no: 2, name: 'INVITATION_ONLY' },
    { no: 3, name: 'MANUAL_ACCEPT' },
  ]
)

/**
 * @generated from message TokenCriteria
 */
export class TokenCriteria extends Message<TokenCriteria> {
  /**
   * @generated from field: map<uint64, string> contract_addresses = 1;
   */
  contractAddresses: { [key: string]: string } = {}

  /**
   * @generated from field: CommunityTokenType type = 2;
   */
  type = CommunityTokenType.UNKNOWN_TOKEN_TYPE

  /**
   * @generated from field: string symbol = 3;
   */
  symbol = ''

  /**
   * @generated from field: string name = 4;
   */
  name = ''

  /**
   * @generated from field: string amount = 5 [deprecated = true];
   * @deprecated
   */
  amount = ''

  /**
   * @generated from field: repeated uint64 token_ids = 6;
   */
  tokenIds: bigint[] = []

  /**
   * @generated from field: string ens_pattern = 7;
   */
  ensPattern = ''

  /**
   * @generated from field: uint64 decimals = 8;
   */
  decimals = protoInt64.zero

  /**
   * @generated from field: string amountInWei = 9;
   */
  amountInWei = ''

  constructor(data?: PartialMessage<TokenCriteria>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'TokenCriteria'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'contract_addresses',
      kind: 'map',
      K: 4 /* ScalarType.UINT64 */,
      V: { kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    },
    {
      no: 2,
      name: 'type',
      kind: 'enum',
      T: proto3.getEnumType(CommunityTokenType),
    },
    { no: 3, name: 'symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'amount', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 6,
      name: 'token_ids',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
      repeated: true,
    },
    {
      no: 7,
      name: 'ens_pattern',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 8, name: 'decimals', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    {
      no: 9,
      name: 'amountInWei',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): TokenCriteria {
    return new TokenCriteria().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): TokenCriteria {
    return new TokenCriteria().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): TokenCriteria {
    return new TokenCriteria().fromJsonString(jsonString, options)
  }

  static equals(
    a: TokenCriteria | PlainMessage<TokenCriteria> | undefined,
    b: TokenCriteria | PlainMessage<TokenCriteria> | undefined
  ): boolean {
    return proto3.util.equals(TokenCriteria, a, b)
  }
}

/**
 * @generated from message CommunityTokenPermission
 */
export class CommunityTokenPermission extends Message<CommunityTokenPermission> {
  /**
   * @generated from field: string id = 1;
   */
  id = ''

  /**
   * @generated from field: CommunityTokenPermission.Type type = 2;
   */
  type = CommunityTokenPermission_Type.UNKNOWN_TOKEN_PERMISSION

  /**
   * @generated from field: repeated TokenCriteria token_criteria = 3;
   */
  tokenCriteria: TokenCriteria[] = []

  /**
   * @generated from field: repeated string chat_ids = 4;
   */
  chatIds: string[] = []

  /**
   * @generated from field: bool is_private = 5;
   */
  isPrivate = false

  constructor(data?: PartialMessage<CommunityTokenPermission>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityTokenPermission'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 2,
      name: 'type',
      kind: 'enum',
      T: proto3.getEnumType(CommunityTokenPermission_Type),
    },
    {
      no: 3,
      name: 'token_criteria',
      kind: 'message',
      T: TokenCriteria,
      repeated: true,
    },
    {
      no: 4,
      name: 'chat_ids',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 5, name: 'is_private', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityTokenPermission {
    return new CommunityTokenPermission().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityTokenPermission {
    return new CommunityTokenPermission().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityTokenPermission {
    return new CommunityTokenPermission().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CommunityTokenPermission
      | PlainMessage<CommunityTokenPermission>
      | undefined,
    b:
      | CommunityTokenPermission
      | PlainMessage<CommunityTokenPermission>
      | undefined
  ): boolean {
    return proto3.util.equals(CommunityTokenPermission, a, b)
  }
}

/**
 * @generated from enum CommunityTokenPermission.Type
 */
export enum CommunityTokenPermission_Type {
  /**
   * @generated from enum value: UNKNOWN_TOKEN_PERMISSION = 0;
   */
  UNKNOWN_TOKEN_PERMISSION = 0,

  /**
   * @generated from enum value: BECOME_ADMIN = 1;
   */
  BECOME_ADMIN = 1,

  /**
   * @generated from enum value: BECOME_MEMBER = 2;
   */
  BECOME_MEMBER = 2,

  /**
   * @generated from enum value: CAN_VIEW_CHANNEL = 3;
   */
  CAN_VIEW_CHANNEL = 3,

  /**
   * @generated from enum value: CAN_VIEW_AND_POST_CHANNEL = 4;
   */
  CAN_VIEW_AND_POST_CHANNEL = 4,

  /**
   * @generated from enum value: BECOME_TOKEN_MASTER = 5;
   */
  BECOME_TOKEN_MASTER = 5,

  /**
   * @generated from enum value: BECOME_TOKEN_OWNER = 6;
   */
  BECOME_TOKEN_OWNER = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(CommunityTokenPermission_Type)
proto3.util.setEnumType(
  CommunityTokenPermission_Type,
  'CommunityTokenPermission.Type',
  [
    { no: 0, name: 'UNKNOWN_TOKEN_PERMISSION' },
    { no: 1, name: 'BECOME_ADMIN' },
    { no: 2, name: 'BECOME_MEMBER' },
    { no: 3, name: 'CAN_VIEW_CHANNEL' },
    { no: 4, name: 'CAN_VIEW_AND_POST_CHANNEL' },
    { no: 5, name: 'BECOME_TOKEN_MASTER' },
    { no: 6, name: 'BECOME_TOKEN_OWNER' },
  ]
)

/**
 * @generated from message CommunityDescription
 */
export class CommunityDescription extends Message<CommunityDescription> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: map<string, CommunityMember> members = 2;
   */
  members: { [key: string]: CommunityMember } = {}

  /**
   * @generated from field: CommunityPermissions permissions = 3;
   */
  permissions?: CommunityPermissions

  /**
   * @generated from field: ChatIdentity identity = 5;
   */
  identity?: ChatIdentity

  /**
   * @generated from field: map<string, CommunityChat> chats = 6;
   */
  chats: { [key: string]: CommunityChat } = {}

  /**
   * @generated from field: repeated string ban_list = 7 [deprecated = true];
   * @deprecated
   */
  banList: string[] = []

  /**
   * @generated from field: map<string, CommunityCategory> categories = 8;
   */
  categories: { [key: string]: CommunityCategory } = {}

  /**
   * @generated from field: uint64 archive_magnetlink_clock = 9;
   */
  archiveMagnetlinkClock = protoInt64.zero

  /**
   * @generated from field: CommunityAdminSettings admin_settings = 10;
   */
  adminSettings?: CommunityAdminSettings

  /**
   * @generated from field: string intro_message = 11;
   */
  introMessage = ''

  /**
   * @generated from field: string outro_message = 12;
   */
  outroMessage = ''

  /**
   * @generated from field: bool encrypted = 13 [deprecated = true];
   * @deprecated
   */
  encrypted = false

  /**
   * @generated from field: repeated string tags = 14;
   */
  tags: string[] = []

  /**
   * @generated from field: map<string, CommunityTokenPermission> token_permissions = 15;
   */
  tokenPermissions: { [key: string]: CommunityTokenPermission } = {}

  /**
   * @generated from field: repeated CommunityTokenMetadata community_tokens_metadata = 16;
   */
  communityTokensMetadata: CommunityTokenMetadata[] = []

  /**
   * @generated from field: uint64 active_members_count = 17;
   */
  activeMembersCount = protoInt64.zero

  /**
   * @generated from field: string ID = 18;
   */
  ID = ''

  /**
   * @generated from field: map<string, CommunityBanInfo> banned_members = 19;
   */
  bannedMembers: { [key: string]: CommunityBanInfo } = {}

  /**
   * key is hash ratchet key_id + seq_no
   *
   * @generated from field: map<string, bytes> privateData = 100;
   */
  privateData: { [key: string]: Uint8Array } = {}

  constructor(data?: PartialMessage<CommunityDescription>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityDescription'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    {
      no: 2,
      name: 'members',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: CommunityMember },
    },
    { no: 3, name: 'permissions', kind: 'message', T: CommunityPermissions },
    { no: 5, name: 'identity', kind: 'message', T: ChatIdentity },
    {
      no: 6,
      name: 'chats',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: CommunityChat },
    },
    {
      no: 7,
      name: 'ban_list',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 8,
      name: 'categories',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: CommunityCategory },
    },
    {
      no: 9,
      name: 'archive_magnetlink_clock',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
    {
      no: 10,
      name: 'admin_settings',
      kind: 'message',
      T: CommunityAdminSettings,
    },
    {
      no: 11,
      name: 'intro_message',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 12,
      name: 'outro_message',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 13, name: 'encrypted', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    {
      no: 14,
      name: 'tags',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    {
      no: 15,
      name: 'token_permissions',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: CommunityTokenPermission },
    },
    {
      no: 16,
      name: 'community_tokens_metadata',
      kind: 'message',
      T: CommunityTokenMetadata,
      repeated: true,
    },
    {
      no: 17,
      name: 'active_members_count',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
    },
    { no: 18, name: 'ID', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 19,
      name: 'banned_members',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: CommunityBanInfo },
    },
    {
      no: 100,
      name: 'privateData',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityDescription {
    return new CommunityDescription().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityDescription {
    return new CommunityDescription().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityDescription {
    return new CommunityDescription().fromJsonString(jsonString, options)
  }

  static equals(
    a: CommunityDescription | PlainMessage<CommunityDescription> | undefined,
    b: CommunityDescription | PlainMessage<CommunityDescription> | undefined
  ): boolean {
    return proto3.util.equals(CommunityDescription, a, b)
  }
}

/**
 * @generated from message CommunityBanInfo
 */
export class CommunityBanInfo extends Message<CommunityBanInfo> {
  /**
   * @generated from field: bool delete_all_messages = 1;
   */
  deleteAllMessages = false

  constructor(data?: PartialMessage<CommunityBanInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityBanInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'delete_all_messages',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityBanInfo {
    return new CommunityBanInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityBanInfo {
    return new CommunityBanInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityBanInfo {
    return new CommunityBanInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a: CommunityBanInfo | PlainMessage<CommunityBanInfo> | undefined,
    b: CommunityBanInfo | PlainMessage<CommunityBanInfo> | undefined
  ): boolean {
    return proto3.util.equals(CommunityBanInfo, a, b)
  }
}

/**
 * @generated from message CommunityAdminSettings
 */
export class CommunityAdminSettings extends Message<CommunityAdminSettings> {
  /**
   * @generated from field: bool pin_message_all_members_enabled = 1;
   */
  pinMessageAllMembersEnabled = false

  constructor(data?: PartialMessage<CommunityAdminSettings>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityAdminSettings'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'pin_message_all_members_enabled',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityAdminSettings {
    return new CommunityAdminSettings().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityAdminSettings {
    return new CommunityAdminSettings().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityAdminSettings {
    return new CommunityAdminSettings().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CommunityAdminSettings
      | PlainMessage<CommunityAdminSettings>
      | undefined,
    b: CommunityAdminSettings | PlainMessage<CommunityAdminSettings> | undefined
  ): boolean {
    return proto3.util.equals(CommunityAdminSettings, a, b)
  }
}

/**
 * @generated from message CommunityChat
 */
export class CommunityChat extends Message<CommunityChat> {
  /**
   * @generated from field: map<string, CommunityMember> members = 1;
   */
  members: { [key: string]: CommunityMember } = {}

  /**
   * @generated from field: CommunityPermissions permissions = 2;
   */
  permissions?: CommunityPermissions

  /**
   * @generated from field: ChatIdentity identity = 3;
   */
  identity?: ChatIdentity

  /**
   * @generated from field: string category_id = 4;
   */
  categoryId = ''

  /**
   * @generated from field: int32 position = 5;
   */
  position = 0

  /**
   * @generated from field: bool viewers_can_post_reactions = 6;
   */
  viewersCanPostReactions = false

  constructor(data?: PartialMessage<CommunityChat>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityChat'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'members',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: CommunityMember },
    },
    { no: 2, name: 'permissions', kind: 'message', T: CommunityPermissions },
    { no: 3, name: 'identity', kind: 'message', T: ChatIdentity },
    {
      no: 4,
      name: 'category_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 5, name: 'position', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    {
      no: 6,
      name: 'viewers_can_post_reactions',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityChat {
    return new CommunityChat().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityChat {
    return new CommunityChat().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityChat {
    return new CommunityChat().fromJsonString(jsonString, options)
  }

  static equals(
    a: CommunityChat | PlainMessage<CommunityChat> | undefined,
    b: CommunityChat | PlainMessage<CommunityChat> | undefined
  ): boolean {
    return proto3.util.equals(CommunityChat, a, b)
  }
}

/**
 * @generated from message CommunityCategory
 */
export class CommunityCategory extends Message<CommunityCategory> {
  /**
   * @generated from field: string category_id = 1;
   */
  categoryId = ''

  /**
   * @generated from field: string name = 2;
   */
  name = ''

  /**
   * @generated from field: int32 position = 3;
   */
  position = 0

  constructor(data?: PartialMessage<CommunityCategory>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityCategory'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'category_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'position', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityCategory {
    return new CommunityCategory().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityCategory {
    return new CommunityCategory().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityCategory {
    return new CommunityCategory().fromJsonString(jsonString, options)
  }

  static equals(
    a: CommunityCategory | PlainMessage<CommunityCategory> | undefined,
    b: CommunityCategory | PlainMessage<CommunityCategory> | undefined
  ): boolean {
    return proto3.util.equals(CommunityCategory, a, b)
  }
}

/**
 * @generated from message RevealedAccount
 */
export class RevealedAccount extends Message<RevealedAccount> {
  /**
   * @generated from field: string address = 1;
   */
  address = ''

  /**
   * @generated from field: bytes signature = 2;
   */
  signature = new Uint8Array(0)

  /**
   * @generated from field: repeated uint64 chain_ids = 3;
   */
  chainIds: bigint[] = []

  /**
   * @generated from field: bool isAirdropAddress = 4;
   */
  isAirdropAddress = false

  constructor(data?: PartialMessage<RevealedAccount>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'RevealedAccount'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'signature', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 3,
      name: 'chain_ids',
      kind: 'scalar',
      T: 4 /* ScalarType.UINT64 */,
      repeated: true,
    },
    {
      no: 4,
      name: 'isAirdropAddress',
      kind: 'scalar',
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): RevealedAccount {
    return new RevealedAccount().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): RevealedAccount {
    return new RevealedAccount().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): RevealedAccount {
    return new RevealedAccount().fromJsonString(jsonString, options)
  }

  static equals(
    a: RevealedAccount | PlainMessage<RevealedAccount> | undefined,
    b: RevealedAccount | PlainMessage<RevealedAccount> | undefined
  ): boolean {
    return proto3.util.equals(RevealedAccount, a, b)
  }
}

/**
 * @generated from message CommunityRequestToJoin
 */
export class CommunityRequestToJoin extends Message<CommunityRequestToJoin> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: string ens_name = 2;
   */
  ensName = ''

  /**
   * @generated from field: string chat_id = 3;
   */
  chatId = ''

  /**
   * @generated from field: bytes community_id = 4;
   */
  communityId = new Uint8Array(0)

  /**
   * @generated from field: string display_name = 5;
   */
  displayName = ''

  /**
   * @generated from field: repeated RevealedAccount revealed_accounts = 6;
   */
  revealedAccounts: RevealedAccount[] = []

  constructor(data?: PartialMessage<CommunityRequestToJoin>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityRequestToJoin'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'ens_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'chat_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 5,
      name: 'display_name',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    {
      no: 6,
      name: 'revealed_accounts',
      kind: 'message',
      T: RevealedAccount,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityRequestToJoin {
    return new CommunityRequestToJoin().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityRequestToJoin {
    return new CommunityRequestToJoin().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityRequestToJoin {
    return new CommunityRequestToJoin().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CommunityRequestToJoin
      | PlainMessage<CommunityRequestToJoin>
      | undefined,
    b: CommunityRequestToJoin | PlainMessage<CommunityRequestToJoin> | undefined
  ): boolean {
    return proto3.util.equals(CommunityRequestToJoin, a, b)
  }
}

/**
 * @generated from message CommunityEditSharedAddresses
 */
export class CommunityEditSharedAddresses extends Message<CommunityEditSharedAddresses> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: bytes community_id = 2;
   */
  communityId = new Uint8Array(0)

  /**
   * @generated from field: repeated RevealedAccount revealed_accounts = 3;
   */
  revealedAccounts: RevealedAccount[] = []

  constructor(data?: PartialMessage<CommunityEditSharedAddresses>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityEditSharedAddresses'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    {
      no: 2,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 3,
      name: 'revealed_accounts',
      kind: 'message',
      T: RevealedAccount,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityEditSharedAddresses {
    return new CommunityEditSharedAddresses().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityEditSharedAddresses {
    return new CommunityEditSharedAddresses().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityEditSharedAddresses {
    return new CommunityEditSharedAddresses().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CommunityEditSharedAddresses
      | PlainMessage<CommunityEditSharedAddresses>
      | undefined,
    b:
      | CommunityEditSharedAddresses
      | PlainMessage<CommunityEditSharedAddresses>
      | undefined
  ): boolean {
    return proto3.util.equals(CommunityEditSharedAddresses, a, b)
  }
}

/**
 * @generated from message CommunityCancelRequestToJoin
 */
export class CommunityCancelRequestToJoin extends Message<CommunityCancelRequestToJoin> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: string ens_name = 2;
   */
  ensName = ''

  /**
   * @generated from field: string chat_id = 3;
   */
  chatId = ''

  /**
   * @generated from field: bytes community_id = 4;
   */
  communityId = new Uint8Array(0)

  /**
   * @generated from field: string display_name = 5;
   */
  displayName = ''

  constructor(data?: PartialMessage<CommunityCancelRequestToJoin>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityCancelRequestToJoin'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'ens_name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'chat_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 5,
      name: 'display_name',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityCancelRequestToJoin {
    return new CommunityCancelRequestToJoin().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityCancelRequestToJoin {
    return new CommunityCancelRequestToJoin().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityCancelRequestToJoin {
    return new CommunityCancelRequestToJoin().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CommunityCancelRequestToJoin
      | PlainMessage<CommunityCancelRequestToJoin>
      | undefined,
    b:
      | CommunityCancelRequestToJoin
      | PlainMessage<CommunityCancelRequestToJoin>
      | undefined
  ): boolean {
    return proto3.util.equals(CommunityCancelRequestToJoin, a, b)
  }
}

/**
 * @generated from message CommunityUserKicked
 */
export class CommunityUserKicked extends Message<CommunityUserKicked> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: bytes community_id = 2;
   */
  communityId = new Uint8Array(0)

  constructor(data?: PartialMessage<CommunityUserKicked>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityUserKicked'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    {
      no: 2,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityUserKicked {
    return new CommunityUserKicked().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityUserKicked {
    return new CommunityUserKicked().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityUserKicked {
    return new CommunityUserKicked().fromJsonString(jsonString, options)
  }

  static equals(
    a: CommunityUserKicked | PlainMessage<CommunityUserKicked> | undefined,
    b: CommunityUserKicked | PlainMessage<CommunityUserKicked> | undefined
  ): boolean {
    return proto3.util.equals(CommunityUserKicked, a, b)
  }
}

/**
 * @generated from message CommunityRequestToJoinResponse
 */
export class CommunityRequestToJoinResponse extends Message<CommunityRequestToJoinResponse> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: CommunityDescription community = 2;
   */
  community?: CommunityDescription

  /**
   * @generated from field: bool accepted = 3;
   */
  accepted = false

  /**
   * @generated from field: bytes grant = 4;
   */
  grant = new Uint8Array(0)

  /**
   * @generated from field: bytes community_id = 5;
   */
  communityId = new Uint8Array(0)

  /**
   * @generated from field: string magnet_uri = 6;
   */
  magnetUri = ''

  /**
   * @generated from field: bytes protected_topic_private_key = 7;
   */
  protectedTopicPrivateKey = new Uint8Array(0)

  /**
   * @generated from field: Shard shard = 8;
   */
  shard?: Shard

  constructor(data?: PartialMessage<CommunityRequestToJoinResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityRequestToJoinResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'community', kind: 'message', T: CommunityDescription },
    { no: 3, name: 'accepted', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: 'grant', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 5,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    { no: 6, name: 'magnet_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 7,
      name: 'protected_topic_private_key',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    { no: 8, name: 'shard', kind: 'message', T: Shard },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityRequestToJoinResponse {
    return new CommunityRequestToJoinResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityRequestToJoinResponse {
    return new CommunityRequestToJoinResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityRequestToJoinResponse {
    return new CommunityRequestToJoinResponse().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CommunityRequestToJoinResponse
      | PlainMessage<CommunityRequestToJoinResponse>
      | undefined,
    b:
      | CommunityRequestToJoinResponse
      | PlainMessage<CommunityRequestToJoinResponse>
      | undefined
  ): boolean {
    return proto3.util.equals(CommunityRequestToJoinResponse, a, b)
  }
}

/**
 * @generated from message CommunityRequestToLeave
 */
export class CommunityRequestToLeave extends Message<CommunityRequestToLeave> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: bytes community_id = 2;
   */
  communityId = new Uint8Array(0)

  constructor(data?: PartialMessage<CommunityRequestToLeave>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityRequestToLeave'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    {
      no: 2,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityRequestToLeave {
    return new CommunityRequestToLeave().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityRequestToLeave {
    return new CommunityRequestToLeave().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityRequestToLeave {
    return new CommunityRequestToLeave().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | CommunityRequestToLeave
      | PlainMessage<CommunityRequestToLeave>
      | undefined,
    b:
      | CommunityRequestToLeave
      | PlainMessage<CommunityRequestToLeave>
      | undefined
  ): boolean {
    return proto3.util.equals(CommunityRequestToLeave, a, b)
  }
}

/**
 * @generated from message CommunityMessageArchiveMagnetlink
 */
export class CommunityMessageArchiveMagnetlink extends Message<CommunityMessageArchiveMagnetlink> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: string magnet_uri = 2;
   */
  magnetUri = ''

  constructor(data?: PartialMessage<CommunityMessageArchiveMagnetlink>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityMessageArchiveMagnetlink'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'magnet_uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityMessageArchiveMagnetlink {
    return new CommunityMessageArchiveMagnetlink().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityMessageArchiveMagnetlink {
    return new CommunityMessageArchiveMagnetlink().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityMessageArchiveMagnetlink {
    return new CommunityMessageArchiveMagnetlink().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CommunityMessageArchiveMagnetlink
      | PlainMessage<CommunityMessageArchiveMagnetlink>
      | undefined,
    b:
      | CommunityMessageArchiveMagnetlink
      | PlainMessage<CommunityMessageArchiveMagnetlink>
      | undefined
  ): boolean {
    return proto3.util.equals(CommunityMessageArchiveMagnetlink, a, b)
  }
}

/**
 * @generated from message WakuMessage
 */
export class WakuMessage extends Message<WakuMessage> {
  /**
   * @generated from field: bytes sig = 1;
   */
  sig = new Uint8Array(0)

  /**
   * @generated from field: uint64 timestamp = 2;
   */
  timestamp = protoInt64.zero

  /**
   * @generated from field: bytes topic = 3;
   */
  topic = new Uint8Array(0)

  /**
   * @generated from field: bytes payload = 4;
   */
  payload = new Uint8Array(0)

  /**
   * @generated from field: bytes padding = 5;
   */
  padding = new Uint8Array(0)

  /**
   * @generated from field: bytes hash = 6;
   */
  hash = new Uint8Array(0)

  /**
   * @generated from field: string thirdPartyId = 7;
   */
  thirdPartyId = ''

  constructor(data?: PartialMessage<WakuMessage>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'WakuMessage'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sig', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: 'timestamp', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: 'topic', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: 'payload', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: 'padding', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 6, name: 'hash', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    {
      no: 7,
      name: 'thirdPartyId',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): WakuMessage {
    return new WakuMessage().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): WakuMessage {
    return new WakuMessage().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): WakuMessage {
    return new WakuMessage().fromJsonString(jsonString, options)
  }

  static equals(
    a: WakuMessage | PlainMessage<WakuMessage> | undefined,
    b: WakuMessage | PlainMessage<WakuMessage> | undefined
  ): boolean {
    return proto3.util.equals(WakuMessage, a, b)
  }
}

/**
 * @generated from message WakuMessageArchiveMetadata
 */
export class WakuMessageArchiveMetadata extends Message<WakuMessageArchiveMetadata> {
  /**
   * @generated from field: uint32 version = 1;
   */
  version = 0

  /**
   * @generated from field: uint64 from = 2;
   */
  from = protoInt64.zero

  /**
   * @generated from field: uint64 to = 3;
   */
  to = protoInt64.zero

  /**
   * @generated from field: repeated bytes contentTopic = 4;
   */
  contentTopic: Uint8Array[] = []

  constructor(data?: PartialMessage<WakuMessageArchiveMetadata>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'WakuMessageArchiveMetadata'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'version', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: 'from', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: 'to', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    {
      no: 4,
      name: 'contentTopic',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): WakuMessageArchiveMetadata {
    return new WakuMessageArchiveMetadata().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): WakuMessageArchiveMetadata {
    return new WakuMessageArchiveMetadata().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): WakuMessageArchiveMetadata {
    return new WakuMessageArchiveMetadata().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | WakuMessageArchiveMetadata
      | PlainMessage<WakuMessageArchiveMetadata>
      | undefined,
    b:
      | WakuMessageArchiveMetadata
      | PlainMessage<WakuMessageArchiveMetadata>
      | undefined
  ): boolean {
    return proto3.util.equals(WakuMessageArchiveMetadata, a, b)
  }
}

/**
 * @generated from message WakuMessageArchive
 */
export class WakuMessageArchive extends Message<WakuMessageArchive> {
  /**
   * @generated from field: uint32 version = 1;
   */
  version = 0

  /**
   * @generated from field: WakuMessageArchiveMetadata metadata = 2;
   */
  metadata?: WakuMessageArchiveMetadata

  /**
   * @generated from field: repeated WakuMessage messages = 3;
   */
  messages: WakuMessage[] = []

  constructor(data?: PartialMessage<WakuMessageArchive>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'WakuMessageArchive'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'version', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: 'metadata', kind: 'message', T: WakuMessageArchiveMetadata },
    {
      no: 3,
      name: 'messages',
      kind: 'message',
      T: WakuMessage,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): WakuMessageArchive {
    return new WakuMessageArchive().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): WakuMessageArchive {
    return new WakuMessageArchive().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): WakuMessageArchive {
    return new WakuMessageArchive().fromJsonString(jsonString, options)
  }

  static equals(
    a: WakuMessageArchive | PlainMessage<WakuMessageArchive> | undefined,
    b: WakuMessageArchive | PlainMessage<WakuMessageArchive> | undefined
  ): boolean {
    return proto3.util.equals(WakuMessageArchive, a, b)
  }
}

/**
 * @generated from message WakuMessageArchiveIndexMetadata
 */
export class WakuMessageArchiveIndexMetadata extends Message<WakuMessageArchiveIndexMetadata> {
  /**
   * @generated from field: uint32 version = 1;
   */
  version = 0

  /**
   * @generated from field: WakuMessageArchiveMetadata metadata = 2;
   */
  metadata?: WakuMessageArchiveMetadata

  /**
   * @generated from field: uint64 offset = 3;
   */
  offset = protoInt64.zero

  /**
   * @generated from field: uint64 size = 4;
   */
  size = protoInt64.zero

  /**
   * @generated from field: uint64 padding = 5;
   */
  padding = protoInt64.zero

  constructor(data?: PartialMessage<WakuMessageArchiveIndexMetadata>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'WakuMessageArchiveIndexMetadata'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'version', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: 'metadata', kind: 'message', T: WakuMessageArchiveMetadata },
    { no: 3, name: 'offset', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: 'size', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: 'padding', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): WakuMessageArchiveIndexMetadata {
    return new WakuMessageArchiveIndexMetadata().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): WakuMessageArchiveIndexMetadata {
    return new WakuMessageArchiveIndexMetadata().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): WakuMessageArchiveIndexMetadata {
    return new WakuMessageArchiveIndexMetadata().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | WakuMessageArchiveIndexMetadata
      | PlainMessage<WakuMessageArchiveIndexMetadata>
      | undefined,
    b:
      | WakuMessageArchiveIndexMetadata
      | PlainMessage<WakuMessageArchiveIndexMetadata>
      | undefined
  ): boolean {
    return proto3.util.equals(WakuMessageArchiveIndexMetadata, a, b)
  }
}

/**
 * @generated from message WakuMessageArchiveIndex
 */
export class WakuMessageArchiveIndex extends Message<WakuMessageArchiveIndex> {
  /**
   * @generated from field: map<string, WakuMessageArchiveIndexMetadata> archives = 1;
   */
  archives: { [key: string]: WakuMessageArchiveIndexMetadata } = {}

  constructor(data?: PartialMessage<WakuMessageArchiveIndex>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'WakuMessageArchiveIndex'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'archives',
      kind: 'map',
      K: 9 /* ScalarType.STRING */,
      V: { kind: 'message', T: WakuMessageArchiveIndexMetadata },
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): WakuMessageArchiveIndex {
    return new WakuMessageArchiveIndex().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): WakuMessageArchiveIndex {
    return new WakuMessageArchiveIndex().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): WakuMessageArchiveIndex {
    return new WakuMessageArchiveIndex().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | WakuMessageArchiveIndex
      | PlainMessage<WakuMessageArchiveIndex>
      | undefined,
    b:
      | WakuMessageArchiveIndex
      | PlainMessage<WakuMessageArchiveIndex>
      | undefined
  ): boolean {
    return proto3.util.equals(WakuMessageArchiveIndex, a, b)
  }
}

/**
 * @generated from message CommunityPublicStorenodesInfo
 */
export class CommunityPublicStorenodesInfo extends Message<CommunityPublicStorenodesInfo> {
  /**
   * Signature of the payload field
   *
   * @generated from field: bytes signature = 1;
   */
  signature = new Uint8Array(0)

  /**
   * Marshaled CommunityStorenodes
   *
   * @generated from field: bytes payload = 2;
   */
  payload = new Uint8Array(0)

  constructor(data?: PartialMessage<CommunityPublicStorenodesInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityPublicStorenodesInfo'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'signature', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: 'payload', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityPublicStorenodesInfo {
    return new CommunityPublicStorenodesInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityPublicStorenodesInfo {
    return new CommunityPublicStorenodesInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityPublicStorenodesInfo {
    return new CommunityPublicStorenodesInfo().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CommunityPublicStorenodesInfo
      | PlainMessage<CommunityPublicStorenodesInfo>
      | undefined,
    b:
      | CommunityPublicStorenodesInfo
      | PlainMessage<CommunityPublicStorenodesInfo>
      | undefined
  ): boolean {
    return proto3.util.equals(CommunityPublicStorenodesInfo, a, b)
  }
}

/**
 * @generated from message CommunityStorenodes
 */
export class CommunityStorenodes extends Message<CommunityStorenodes> {
  /**
   * @generated from field: uint64 clock = 1;
   */
  clock = protoInt64.zero

  /**
   * @generated from field: bytes community_id = 2;
   */
  communityId = new Uint8Array(0)

  /**
   * @generated from field: repeated Storenode storenodes = 3;
   */
  storenodes: Storenode[] = []

  /**
   * @generated from field: uint64 chain_id = 4;
   */
  chainId = protoInt64.zero

  constructor(data?: PartialMessage<CommunityStorenodes>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityStorenodes'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'clock', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    {
      no: 2,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 3,
      name: 'storenodes',
      kind: 'message',
      T: Storenode,
      repeated: true,
    },
    { no: 4, name: 'chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityStorenodes {
    return new CommunityStorenodes().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityStorenodes {
    return new CommunityStorenodes().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityStorenodes {
    return new CommunityStorenodes().fromJsonString(jsonString, options)
  }

  static equals(
    a: CommunityStorenodes | PlainMessage<CommunityStorenodes> | undefined,
    b: CommunityStorenodes | PlainMessage<CommunityStorenodes> | undefined
  ): boolean {
    return proto3.util.equals(CommunityStorenodes, a, b)
  }
}

/**
 * @generated from message Storenode
 */
export class Storenode extends Message<Storenode> {
  /**
   * @generated from field: bytes community_id = 1;
   */
  communityId = new Uint8Array(0)

  /**
   * @generated from field: string storenode_id = 2;
   */
  storenodeId = ''

  /**
   * @generated from field: string name = 3;
   */
  name = ''

  /**
   * @generated from field: string address = 4;
   */
  address = ''

  /**
   * @generated from field: string fleet = 5;
   */
  fleet = ''

  /**
   * @generated from field: uint32 version = 6;
   */
  version = 0

  /**
   * @generated from field: bool removed = 7;
   */
  removed = false

  /**
   * @generated from field: int64 deleted_at = 8;
   */
  deletedAt = protoInt64.zero

  constructor(data?: PartialMessage<Storenode>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'Storenode'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
    {
      no: 2,
      name: 'storenode_id',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
    },
    { no: 3, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'fleet', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 6, name: 'version', kind: 'scalar', T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: 'removed', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: 'deleted_at', kind: 'scalar', T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): Storenode {
    return new Storenode().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): Storenode {
    return new Storenode().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): Storenode {
    return new Storenode().fromJsonString(jsonString, options)
  }

  static equals(
    a: Storenode | PlainMessage<Storenode> | undefined,
    b: Storenode | PlainMessage<Storenode> | undefined
  ): boolean {
    return proto3.util.equals(Storenode, a, b)
  }
}

/**
 * @generated from message CommunityReevaluatePermissionsRequest
 */
export class CommunityReevaluatePermissionsRequest extends Message<CommunityReevaluatePermissionsRequest> {
  /**
   * @generated from field: bytes community_id = 1;
   */
  communityId = new Uint8Array(0)

  constructor(data?: PartialMessage<CommunityReevaluatePermissionsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'CommunityReevaluatePermissionsRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: 'community_id',
      kind: 'scalar',
      T: 12 /* ScalarType.BYTES */,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>
  ): CommunityReevaluatePermissionsRequest {
    return new CommunityReevaluatePermissionsRequest().fromBinary(
      bytes,
      options
    )
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>
  ): CommunityReevaluatePermissionsRequest {
    return new CommunityReevaluatePermissionsRequest().fromJson(
      jsonValue,
      options
    )
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>
  ): CommunityReevaluatePermissionsRequest {
    return new CommunityReevaluatePermissionsRequest().fromJsonString(
      jsonString,
      options
    )
  }

  static equals(
    a:
      | CommunityReevaluatePermissionsRequest
      | PlainMessage<CommunityReevaluatePermissionsRequest>
      | undefined,
    b:
      | CommunityReevaluatePermissionsRequest
      | PlainMessage<CommunityReevaluatePermissionsRequest>
      | undefined
  ): boolean {
    return proto3.util.equals(CommunityReevaluatePermissionsRequest, a, b)
  }
}
